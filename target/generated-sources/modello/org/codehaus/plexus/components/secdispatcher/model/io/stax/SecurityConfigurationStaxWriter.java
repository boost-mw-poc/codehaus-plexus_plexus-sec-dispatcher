// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 2.4.0,
// any modifications will be overwritten.
// ==============================================================

package org.codehaus.plexus.components.secdispatcher.model.io.stax;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.IOException;
import java.io.OutputStream;
import java.io.StringWriter;
import java.io.Writer;
import java.text.DateFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.jar.Manifest;
import javax.xml.stream.*;
import org.codehaus.plexus.components.secdispatcher.model.Config;
import org.codehaus.plexus.components.secdispatcher.model.ConfigProperty;
import org.codehaus.plexus.components.secdispatcher.model.SettingsSecurity;

/**
 * Class SecurityConfigurationStaxWriter.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class SecurityConfigurationStaxWriter
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field curId.
     */
    private int curId;

    /**
     * Field idMap.
     */
    private java.util.Map idMap;


      //----------------/
     //- Constructors -/
    //----------------/

    public SecurityConfigurationStaxWriter()
    {
        idMap = new java.util.HashMap();
    } //-- org.codehaus.plexus.components.secdispatcher.model.io.stax.SecurityConfigurationStaxWriter()


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method write.
     * 
     * @param writer a writer object.
     * @param settingsSecurity a settingsSecurity object.
     * @throws java.io.IOException java.io.IOException if any.
     * @throws XMLStreamException XMLStreamException if any.
     */
    public void write( Writer writer, SettingsSecurity settingsSecurity )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( writer ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( settingsSecurity.getModelEncoding(), "1.0" );
        writeSettingsSecurity( settingsSecurity, "settingsSecurity", serializer );
        serializer.writeEndDocument();
    } //-- void write( Writer, SettingsSecurity )

    /**
     * Method write.
     * 
     * @param stream a stream object.
     * @param settingsSecurity a settingsSecurity object.
     * @throws java.io.IOException java.io.IOException if any.
     * @throws XMLStreamException XMLStreamException if any.
     */
    public void write( OutputStream stream, SettingsSecurity settingsSecurity )
        throws java.io.IOException, XMLStreamException
    {
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        boolean supportWindowsLineEndings = false;
        if ( factory.isPropertySupported( "com.ctc.wstx.outputEscapeCr" ) )
        {
            factory.setProperty( "com.ctc.wstx.outputEscapeCr", Boolean.FALSE );
            supportWindowsLineEndings = true;
        }
        if ( factory.isPropertySupported( "org.codehaus.stax2.automaticEmptyElements" ) )
        {
            factory.setProperty( "org.codehaus.stax2.automaticEmptyElements", Boolean.FALSE );
        }
        IndentingXMLStreamWriter serializer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( stream, settingsSecurity.getModelEncoding() ) );
        if ( supportWindowsLineEndings )
        {
            serializer.setNewLine( serializer.getLineSeparator() );
        }
        serializer.writeStartDocument( settingsSecurity.getModelEncoding(), "1.0" );
        writeSettingsSecurity( settingsSecurity, "settingsSecurity", serializer );
        serializer.writeEndDocument();
    } //-- void write( OutputStream, SettingsSecurity )

    /**
     * Method writeConfig.
     * 
     * @param config a config object.
     * @param serializer a serializer object.
     * @param tagName a tagName object.
     * @throws java.io.IOException java.io.IOException if any.
     * @throws XMLStreamException XMLStreamException if any.
     */
    private void writeConfig( Config config, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( config != null )
        {
            serializer.writeStartElement( tagName );
            if ( config.getName() != null )
            {
                serializer.writeStartElement( "name" );
                serializer.writeCharacters( config.getName() );
                serializer.writeEndElement();
            }
            if ( ( config.getProperties() != null ) && ( config.getProperties().size() > 0 ) )
            {
                serializer.writeStartElement( "properties" );
                for ( Iterator iter = config.getProperties().iterator(); iter.hasNext(); )
                {
                    ConfigProperty o = (ConfigProperty) iter.next();
                    writeConfigProperty( o, "property", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeConfig( Config, String, XMLStreamWriter )

    /**
     * Method writeConfigProperty.
     * 
     * @param configProperty a configProperty object.
     * @param serializer a serializer object.
     * @param tagName a tagName object.
     * @throws java.io.IOException java.io.IOException if any.
     * @throws XMLStreamException XMLStreamException if any.
     */
    private void writeConfigProperty( ConfigProperty configProperty, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( configProperty != null )
        {
            serializer.writeStartElement( tagName );
            if ( configProperty.getName() != null )
            {
                serializer.writeStartElement( "name" );
                serializer.writeCharacters( configProperty.getName() );
                serializer.writeEndElement();
            }
            if ( configProperty.getValue() != null )
            {
                serializer.writeStartElement( "value" );
                serializer.writeCharacters( configProperty.getValue() );
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeConfigProperty( ConfigProperty, String, XMLStreamWriter )

    /**
     * Method writeSettingsSecurity.
     * 
     * @param settingsSecurity a settingsSecurity object.
     * @param serializer a serializer object.
     * @param tagName a tagName object.
     * @throws java.io.IOException java.io.IOException if any.
     * @throws XMLStreamException XMLStreamException if any.
     */
    private void writeSettingsSecurity( SettingsSecurity settingsSecurity, String tagName, XMLStreamWriter serializer )
        throws java.io.IOException, XMLStreamException
    {
        if ( settingsSecurity != null )
        {
            serializer.setDefaultNamespace( "http://codehaus-plexus.github.io/plexus-sec-dispatcher/4.0.0" );
            serializer.writeStartElement( tagName );
            serializer.writeDefaultNamespace( "http://codehaus-plexus.github.io/plexus-sec-dispatcher/4.0.0" );
            serializer.setPrefix( "xsi", "http://www.w3.org/2001/XMLSchema-instance" );
            serializer.writeNamespace( "xsi", "http://www.w3.org/2001/XMLSchema-instance" );
            serializer.writeAttribute( "http://www.w3.org/2001/XMLSchema-instance", "schemaLocation", "http://codehaus-plexus.github.io/plexus-sec-dispatcher/4.0.0 https://codehaus-plexus.github.io/xsd/plexus-sec-dispatcher-4.0.0.xsd" );
            if ( settingsSecurity.getModelVersion() != null )
            {
                serializer.writeStartElement( "modelVersion" );
                serializer.writeCharacters( settingsSecurity.getModelVersion() );
                serializer.writeEndElement();
            }
            if ( settingsSecurity.getDefaultDispatcher() != null )
            {
                serializer.writeStartElement( "defaultDispatcher" );
                serializer.writeCharacters( settingsSecurity.getDefaultDispatcher() );
                serializer.writeEndElement();
            }
            if ( ( settingsSecurity.getConfigurations() != null ) && ( settingsSecurity.getConfigurations().size() > 0 ) )
            {
                serializer.writeStartElement( "configurations" );
                for ( Iterator iter = settingsSecurity.getConfigurations().iterator(); iter.hasNext(); )
                {
                    Config o = (Config) iter.next();
                    writeConfig( o, "configuration", serializer );
                }
                serializer.writeEndElement();
            }
            serializer.writeEndElement();
        }
    } //-- void writeSettingsSecurity( SettingsSecurity, String, XMLStreamWriter )

}
